<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ioc | 破狼 Blog]]></title>
  <link href="http://greengerong.github.io/blog/categories/ioc/atom.xml" rel="self"/>
  <link href="http://greengerong.github.io/"/>
  <updated>2015-01-10T23:13:32+08:00</updated>
  <id>http://greengerong.github.io/</id>
  <author>
    <name><![CDATA[破 狼]]></name>
    <email><![CDATA[grzx2210@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java轻量级IOC框架Guice]]></title>
    <link href="http://greengerong.github.io/blog/2014/12/10/light-ioc-guice-framework/"/>
    <updated>2014-12-10T21:50:37+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/12/10/light-ioc-guice-framework</id>
    <content type="html"><![CDATA[<p>Guice是由Google大牛Bob lee开发的一款绝对轻量级的java IoC容器。其优势在于：</p>

<ol>
<li>速度快，号称比spring快100倍。</li>
<li>无外部配置(如需要使用外部可以可以选用Guice的扩展包)，完全基于annotation特性，支持重构，代码静态检查。</li>
<li>简单，快速，基本没有学习成本。</li>
</ol>


<p>Guice和spring各有所长，Guice更适合与嵌入式或者高性能但项目简单方案，如OSGI容器，spring更适合大型项目组织。</p>

<h2>注入方式</h2>

<p>在我们谈到IOC框架，首先我们的话题将是构造，属性以及函数注入方式，Guice的实现只需要在构造函数，字段，或者注入函数上标注@Inject，如：</p>

<h4>构造注入</h4>

<p>```java</p>

<pre><code>public class OrderServiceImpl implements OrderService {
    private ItemService itemService;
    private PriceService priceService;

    @Inject
    public OrderServiceImpl(ItemService itemService, PriceService priceService) {
        this.itemService = itemService;
        this.priceService = priceService;
    }

    ...
}
</code></pre>

<p>```</p>

<h4>属性注入</h4>

<p>```java</p>

<pre><code>public class OrderServiceImpl implements OrderService {
    private ItemService itemService;
    private PriceService priceService;

    @Inject
    public void init(ItemService itemService, PriceService priceService) {
        this.itemService = itemService;
        this.priceService = priceService;
    }

    ...
}
</code></pre>

<p>```</p>

<h4>函数(setter)注入</h4>

<p>```java</p>

<pre><code>public class OrderServiceImpl implements OrderService {
    private ItemService itemService;
    private PriceService priceService;

    @Inject
    public void setItemService(ItemService itemService) {
        this.itemService = itemService;
    }

    @Inject
    public void setPriceService(PriceService priceService) {
        this.priceService = priceService;
    } 

    ...
}
</code></pre>

<p>```</p>

<h2>Module依赖注册</h2>

<p>Guice提供依赖配置类，需要继承至AbstractModule，实现configure方法。在configure方法中我们可以用Binder配置依赖。</p>

<p>Binder利用链式形成一套独具语义的DSL，如：</p>

<ul>
<li>基本配置：binder.bind(serviceClass).to(implClass).in(Scopes.[SINGLETON | NO_SCOPE]);</li>
<li>无base类、接口配置：binder.bind(implClass).in(Scopes.[SINGLETON | NO_SCOPE]);</li>
<li>service实例配置：binder.bind(serviceClass).toInstance(servieInstance).in(Scopes.[SINGLETON | NO_SCOPE]);</li>
<li>多个实例按名注入：binder.bind(serviceClass).annotatedWith(Names.named(&ldquo;name&rdquo;)).to(implClass).in(Scopes.[SINGLETON | NO_SCOPE]);</li>
<li>运行时注入：利用@Provides标注注入方法，相当于spring的@Bean。</li>
<li>@ImplementedBy：或者在实现接口之上标注@ImplementedBy指定其实现类。这种方式有点反OO设计，抽象不该知道其实现类。</li>
</ul>


<p>对于上面的配置在注入的方式仅仅需要@Inject标注，但对于按名注入需要在参数前边加入@Named标注，如：</p>

<p>```java</p>

<pre><code>public void configure() {
    final Binder binder = binder();

    //TODO: bind named instance;
    binder.bind(NamedService.class).annotatedWith(Names.named("impl1")).to(NamedServiceImpl1.class);
    binder.bind(NamedService.class).annotatedWith(Names.named("impl2")).to(NamedServiceImpl2.class);
}

@Inject
public List&lt;NamedService&gt; getAllItemServices(@Named("impl1") NamedService nameService1,
                                                 @Named("impl2") NamedService nameService2) {
}
</code></pre>

<p>```</p>

<p>Guice也可以利用@Provides标注注入方法来运行时注入：如</p>

<p>```java</p>

<pre><code>@Provides
public List&lt;NamedService&gt; getAllItemServices(@Named("impl1") NamedService nameService1,
                                             @Named("impl2") NamedService nameService2) {
    final ArrayList&lt;NamedService&gt; list = new ArrayList&lt;NamedService&gt;();
    list.add(nameService1);
    list.add(nameService2);
    return list;
}
</code></pre>

<p>```</p>

<h2>Guice实例</h2>

<p>下面是一个Guice module的实例代码：包含大部分常用依赖配置方式。更多代码参见<a href="https://github.com/greengerong/guice-demo">github </a>.</p>

<p>```java</p>

<pre><code>package com.github.greengerong.app;

/**
 * ***************************************
 * *
 * Auth: green gerong                     *
 * Date: 2014                             *
 * blog: http://greengerong.github.io/    *
 * github: https://github.com/greengerong *
 * *
 * ****************************************
 */
public class AppModule extends AbstractModule {
    private static final Logger LOGGER = LoggerFactory.getLogger(AppModule.class);
    private final BundleContext bundleContext;

    public AppModule(BundleContext bundleContext) {
        this.bundleContext = bundleContext;
        LOGGER.info(String.format("enter app module with: %s", bundleContext));
    }

    @Override
    public void configure() {
        final Binder binder = binder();
        //TODO: bind interface
        binder.bind(ItemService.class).to(ItemServiceImpl.class).in(SINGLETON);
        binder.bind(OrderService.class).to(OrderServiceImpl.class).in(SINGLETON);
        //TODO: bind self class(without interface or base class)
        binder.bind(PriceService.class).in(Scopes.SINGLETON);


        //TODO: bind instance not class.
        binder.bind(RuntimeService.class).toInstance(new RuntimeService());

        //TODO: bind named instance;
        binder.bind(NamedService.class).annotatedWith(Names.named("impl1")).to(NamedServiceImpl1.class);
        binder.bind(NamedService.class).annotatedWith(Names.named("impl2")).to(NamedServiceImpl2.class);
    }

    @Provides
    public List&lt;NamedService&gt; getAllItemServices(@Named("impl1") NamedService nameService1,
                                                 @Named("impl2") NamedService nameService2) {
        final ArrayList&lt;NamedService&gt; list = new ArrayList&lt;NamedService&gt;();
        list.add(nameService1);
        list.add(nameService2);
        return list;
    }
}
</code></pre>

<p>```</p>

<h2>Guice的使用</h2>

<p>对于Guice的使用则比较简单，利用利用Guice module初始化Guice创建其injector，如：</p>

<p>```java</p>

<pre><code>Injector injector = Guice.createInjector(new AppModule(bundleContext));
</code></pre>

<p>```</p>

<p>这里可以传入多个module，我们可以利用module分离领域依赖。</p>

<p>Guice api方法：</p>

<p> ```java</p>

<pre><code>public static Injector createInjector(Module... modules) 

public static Injector createInjector(Iterable&lt;? extends Module&gt; modules) 

public static Injector createInjector(Stage stage, Module... modules)

public static Injector createInjector(Stage stage, Iterable&lt;? extends Module&gt; modules) 
</code></pre>

<p>```</p>

<p>Guice同时也支持不同Region配置，上面的State重载，state支持 TOOL,DEVELOPMENT,PRODUCTION选项;默认为DEVELOPMENT环境。</p>

<h2>后续</h2>

<p>本文Guice更全的demo代码请参见<a href="https://github.com/greengerong/guice-demo">github </a>.</p>

<p>Guice还有很多的扩展如AOP，同一个服务多个实例注入set，map，OSGI，UOW等扩展，请参见<a href="https://github.com/google/guice/wiki">Guice wiki</a>.</p>
]]></content>
  </entry>
  
</feed>
