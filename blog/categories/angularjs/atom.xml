<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Angularjs | 破狼 Blog]]></title>
  <link href="http://greengerong.github.io/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://greengerong.github.io/"/>
  <updated>2014-02-22T09:05:53+08:00</updated>
  <id>http://greengerong.github.io/</id>
  <author>
    <name><![CDATA[破 狼]]></name>
    <email><![CDATA[grzx2210@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular Form.]]></title>
    <link href="http://greengerong.github.io/blog/2014/02/21/angular-form/"/>
    <updated>2014-02-21T17:24:37+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/02/21/angular-form</id>
    <content type="html"><![CDATA[<p>在本篇博文中，我们将接触angular的验证。angular的验证是由form 指令和ngModel协调完成的。今天博主在这里想要说的是在验证在的一种特殊情况，当验证控件没有没有name属性这是不会被form捕获的。或者是你希望在ngRepeat中使用动态表达式。</p>

<p>下面且让我们先来从angular源码中看起如下：</p>

<p>首先是ngModel：</p>

<pre><code>    var ngModelDirective = function() {
      return {
        require: ['ngModel', '^?form'],
        controller: NgModelController,
        link: function(scope, element, attr, ctrls) {
          // notify others, especially parent forms

          var modelCtrl = ctrls[0],
              formCtrl = ctrls[1] || nullFormCtrl;

          formCtrl.$addControl(modelCtrl);

          scope.$on('$destroy', function() {
            formCtrl.$removeControl(modelCtrl);
          });
        }
      };
    };
</code></pre>

<p>从上面我们能够看出ngModel指令会在编译时期的post link阶段会通过form的 <strong>addControl</strong>方法把自己的controller注册到父节点上的form的formController中。</p>

<p>在看看ngModel controller初始化代码：</p>

<pre><code>    var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse',
        function($scope, $exceptionHandler, $attr, $element, $parse) {
     ....
      this.$pristine = true;
      this.$dirty = false;
      this.$valid = true;
      this.$invalid = false;
      this.$name = $attr.name;
</code></pre>

<p>我们从上面我们可以看到 <strong>ngModel的$name属性并不支持表达式计算</strong>。</p>

<p>而FormController的addControl代码则是：</p>

<pre><code>    /**
     * @ngdoc function
     * @name ng.directive:form.FormController#$addControl
     * @methodOf ng.directive:form.FormController
     *
     * @description
     * Register a control with the form.
     *
     * Input elements using ngModelController do this automatically when they are linked.
     */
    form.$addControl = function(control) {
      // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
      // and not added to the scope.  Now we throw an error.
      assertNotHasOwnProperty(control.$name, 'input');
      controls.push(control);

      if (control.$name) {
        form[control.$name] = control;
      }
    };
</code></pre>

<p>从上面我们可以清楚的看见虽然ngModel注册了自己，但是这里也不一定能注册成功，<strong>ngModel心必须有自己的$name才能被注册成功</strong>。</p>

<p>从上面的代码中可以得出，当我们的验证失效的时候，我们可以有一个万能的方式就是 <strong>手动注册到form controller</strong></p>

<h3>手动注册form controller</h3>

<p>为了我写了一个dy-name的插件，其会在post link阶段解析表达式，并把自己注册到父form controller。</p>

<p>如下：</p>

<pre><code>    .directive("dyName", [

        function() {
          return {
            require: "ngModel",
            link: function(scope, elm, iAttrs, ngModelCtr) {
              ngModelCtr.$name = scope.$eval(iAttrs.dyName)
              var formController = elm.controller('form') || {
                $addControl: angular.noop
              };
              formController.$addControl(ngModelCtr);

              scope.$on('$destroy', function() {
                formController.$removeControl(ngModelCtr);
              });

            }
          };
        }
      ])
</code></pre>

<p>使用方式：</p>

<pre><code>    &lt;div ng-repeat="item in demo.fields"&gt;
      &lt;div class="control-group"&gt;
        &lt;label class="control-label"&gt; : &lt;/label&gt;
        &lt;div class="controls"&gt;
          &lt;input type="number"  dy-name="item.field" ng-model="demo.data[item.field]" min="10" max="500" ng-required="true"/&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
</code></pre>

<p>其实实现为在post link阶段获取到form controller，并把自己注册到form controller，而且为了消除对象的级联，将会在scope摧毁阶段remove自己。</p>

<p>其效果请看<a href="http://jsbin.com/docow/1/edit?html,js,output">jsbin $addControl</a></p>

<p><strong>注意</strong>:在formController.$addControl方法的参数传入的不是界面控件，而是ngModelController.或者名字为$addController更合适。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angularjs中文版本开发指南发布]]></title>
    <link href="http://greengerong.github.io/blog/2014/02/16/angularjs-chinese-guide-public/"/>
    <updated>2014-02-16T02:02:17+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/02/16/angularjs-chinese-guide-public</id>
    <content type="html"><![CDATA[<p><img src="http://angularjs.org/img/AngularJS-large.png" alt="http://angularjs.org/img/AngularJS-large.png" /></p>

<p>从本人开始在写关于Angularjs的文章开始，也算是见证了Angularjs在国内慢慢的火起来，如今的Angularjs正式如日中天。想知道为什么Angularjs会这么火，请移步<a href="http://www.cnblogs.com/whitewolf/p/angularjs-remove-unused-watch.html">angularjs移除不必要的$watch</a>.</p>

<p>也是一次偶然的机会，在Angular.js中文社区群里相遇一群Angular的爱好者，在一次巧妙的交谈，大家对于Angular官方的Guide最新版本没有中文版本表示无助，所以为了诸君更好的了解学习Angularjs，大家临时组织了一个Angular 开发指南翻译团队。</p>

<p>在经过一段时间的协调和大家付出工作之外的业余时间，如今Angularjs的中文本学习指南终于上线出炉</p>

<p>地址为：</p>

<pre><code>[http://angular.duapp.com/guide](http://angular.duapp.com/guide)
</code></pre>

<p>在翻译过程中大家力求准确，但也并不是逐字翻译，也会加上一些"译者注"之类，让大家能够更好的学习，使用Angularjs。同时在Angular开发指南首页我们也收集了很多很好的Angularjs学习资料供大家学习。</p>

<p>最后虽然大家都很努力的翻译力求精准，但也会难免有些issue，请不辞指出，可以提交在github repo issue,或者本文后边加上评论。</p>

<p>同时在本博客中也会很多关于Angularjs实践方面的博客，欢迎大家不辞指教。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Angularjs ngOptions加上index解决方案]]></title>
    <link href="http://greengerong.github.io/blog/2014/02/15/index-for-ng-options/"/>
    <updated>2014-02-15T21:43:06+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/02/15/index-for-ng-options</id>
    <content type="html"><![CDATA[<p>今天在Angularjs交流群中有位童学问道如何为Angular select的ngOptions像Angularjs的ngRepeat一样加上一个索引$index.</p>

<p>其实对于这个问题来说Angular本身并未提供$index之类的变量供使用。但是也不是说对于这个问题我们就没有解决方案。</p>

<p>把这个问题换成角度来看,我们所需要的就是js数组的下标，所以我们如果我们能够在对象上加入下标，使用表达式作为option的label就能解决了。</p>

<p>但是第一印象让我想起的是js数组本来就是一个key/value的对象，只是key为数组下标而已，所以有了如下之设计：</p>

<p>html:</p>

<pre><code>  &lt;pre&gt;&lt;/pre&gt;

  &lt;select  ng-model="a" ng-options="value.field as getDesc1(key,value) for (key,value) in t"&gt;&lt;/select&gt;
</code></pre>

<p>  js:</p>

<pre><code>$scope.getDesc1 = function(key, value) {
    return (parseInt(key, 10) + 1) + "-&gt;" + value.field;
};
</code></pre>

<p>可是不幸的是如果对于JavaScript你若将他作为key/value对象那么key将是无序的所以，出现了无序的下标如下：</p>

<pre><code>&lt;select ng-model="a" ng-options="l.field as getDesc1(key,value) for (key,value) in t " class="ng-valid ng-dirty"&gt;
  &lt;option value="0"  &gt;1-&amp;gt;jw_companyTalent&lt;/option&gt;
  &lt;option value="1"  &gt;2-&amp;gt;jw_reportgroup&lt;/option&gt;
  &lt;option value="10" &gt;11-&amp;gt;jw_ads&lt;/option&gt;
  &lt;option value="11" &gt;12-&amp;gt;jw_jobcomment&lt;/option&gt;
  &lt;option value="12" &gt;13-&amp;gt;jw_companyInfo&lt;/option&gt;
  ....
&lt;/select&gt;
</code></pre>

<p>所以这样是无法解决的。还好博主还有一招，ngOptions支持Angularjs的filter，所以我们可以对数据源对象上加上一个order字段标示下标作为序号。并且你可以在一个2年前的Angular的issue中看到Angular已经fix issue，option会对数组进行按下标顺序生成。</p>

<p>html:</p>

<pre><code>&lt;pre&gt;&lt;/pre&gt;

&lt;select  ng-model="b" ng-options="l.field as getDesc(l) for l in t | index "&gt;&lt;/select&gt;
</code></pre>

<p>js:</p>

<pre><code>    var app = angular.module('plunker', []);

    app.controller('MainCtrl', function($scope) {
      $scope.t = [{
        "field": "jw_companyTalent"
      }, {
        "field": "jw_reportgroup"
      }];
      $scope.getDesc = function(l) {
        return l.order + "-&gt;" + l.field;
      };
    }).filter("index", [
      function() {
        return function(array) {
          return (array || []).map(function(item, index) {
            item.order = index + 1;
            return item;
          });
        };
      }
    ]);
</code></pre>

<p>这下option是按照有序的生成，最后我们终于能完美解决了,所以本文也将收尾。在最后在附上可运行的demo<a href="http://plnkr.co/edit/tRxzOT?p=preview">plnkr ngOptions index</a>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular ngClick阻止冒泡,默认行为]]></title>
    <link href="http://greengerong.github.io/blog/2014/02/11/angular-ngclick-stoppropagation/"/>
    <updated>2014-02-11T22:27:29+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/02/11/angular-ngclick-stoppropagation</id>
    <content type="html"><![CDATA[<p>这其实是一个很简单的问题，如果你认真查看过Angular官方的API文档，本来不想记录的。但是这个问题不止一次的被人问起，所以今天在记录在这里。</p>

<p>在Angular中已经对一些ng事件如ngClick,ngBlur,ngCopy,ngCut,ngDblclick&hellip;中加入了一个变量叫做$event.</p>

<p>如ngClick在官方文档是这么描述的：</p>

<pre><code>Expression to evaluate upon click. (Event object is available as $event)
</code></pre>

<p>在查看Angular代码<a href="https://github.com/angular/angular.js/blob/a68624444afcb9e3796b1a751cf3817cafd20240/src/ng/directive/ngEventDirs.js">ngEventDirs.js</a>:</p>

<pre><code>    var ngEventDirectives = {};
    forEach(
      'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
      function(name) {
        var directiveName = directiveNormalize('ng-' + name);
        ngEventDirectives[directiveName] = ['$parse', function($parse) {
          return {
            compile: function($element, attr) {
              var fn = $parse(attr[directiveName]);
              return function(scope, element, attr) {
                element.on(lowercase(name), function(event) {
                  scope.$apply(function() {
                    fn(scope, {$event:event});
                  });
                });
              };
            }
          };
        }];
      }
    );
</code></pre>

<p>在上边代码我们可以得到两个信息：</p>

<ol>
<li>Angular支持的event： click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste</li>
<li>Angular在执行事件函数时候传入了一个名叫$event的常量，该常量即代表当前event对象，如果你在Angular之前引入了jQuery那么这就是jQuery的event.</li>
</ol>


<p>所以我们可以利用event的stopPropagation来阻止事件的冒泡：如下代码：<a href="http://jsbin.com/delow/3/watch?html,js,output">jsbin</a></p>

<p>html 代码</p>

<pre><code>    &lt;!DOCTYPE html&gt;
    &lt;html id="ng-app" ng-app="app"&gt;
    &lt;head&gt;
    &lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"&gt;&lt;/script&gt;
      &lt;meta charset="utf-8"&gt;
      &lt;title&gt;JS Bin&lt;/title&gt;
    &lt;/head&gt;
    &lt;body ng-controller="demo as d"&gt;
       &lt;div ng-click="d.click('parent',$event)"&gt;
         given some text for click
         &lt;hr&gt;
         &lt;input type="checkbox" ng-model="d.stopPropagation" /&gt;Stop Propagation ?
         &lt;hr&gt;
         &lt;button type="button" ng-click="d.click('button',$event)"&gt;button&lt;/button&gt;

       &lt;/div&gt;
    &lt;/body&gt;
    &lt;/html&gt;             
</code></pre>

<p>js 代码</p>

<pre><code>angular.module("app",[])
.controller("demo",[function(){
  var vm = this;

  vm.click = function(name,$event){
    console.log(name +" -----called");
    if(vm.stopPropagation){
      $event.stopPropagation();
    }
  };

  return vm;
}]);
</code></pre>

<p>可以在<a href="http://jsbin.com/delow/3/watch?html,js,output">jsbin</a>查看效果。</p>

<p>首先打开你的控制台，然在没选中Stop Propagation的情况下点击button你将会看见两条log记录，相反选中后则只会出现button的log信息。</p>

<p>希望大家已经明白了，不要再问这类问题了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngCloak 实现 Angular 初始化闪烁最佳实践]]></title>
    <link href="http://greengerong.github.io/blog/2013/12/27/angular-ngcloak/"/>
    <updated>2013-12-27T00:00:00+08:00</updated>
    <id>http://greengerong.github.io/blog/2013/12/27/angular-ngcloak</id>
    <content type="html"><![CDATA[<p>在做angular的SPA开发时，我们经常会遇见在如Chrome这类能够快速解析的浏览器上出现表达式( {{ express }}  ),或者是模块(div)的闪烁。对于这个问题由于JavaScript去操作DOM，都会等待DOM加载完成（DOM ready）。对于angular会在DOM ready完会才回去解析html view Template，所以对于Chrome这类快速的浏览器你会看见有闪烁的情况出现。而对于IE7，8这类解析稍慢的浏览器大部分情况下是不会出现这个问题的。</p>

<p>在angular中为我们提供了ng-cloak来实现纺织闪烁的方案，我们只需要在需要的地方加上ng-cloak。同时对于bing文字({{ express }} )我们也可以改为ng-bind来实现避免。</p>

<pre><code> &lt;div id="template1" ng-cloak&gt;hello&lt;/div&gt;
 &lt;div id="template2" ng-cloak class="ng-cloak"&gt; {{ 'hello IE7' }}  &lt;/div&gt;
 &lt;div id="template2" ng-bing="'hello IE7'"&gt;&lt;/div&gt;
</code></pre>

<p>angular将ng-cloak实现为一个directive，并会在初始化的时候在DOM的heade增加一行css代码，如下：</p>

<pre><code>&lt;style type="text/css"&gt;@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\:form{display:block;}.ng-animate-start{clip:rect(0,auto,auto,0);-ms-zoom:1.0001;}.ng-animate-active{clip:rect(-1px,auto,auto,0);-ms-zoom:1;}
&lt;/style&gt;
</code></pre>

<p>从上面我们可以看见angular将带有ng-clock的的元素设置为display:none，隐藏掉，在等到angular解析到带有ng-clock的节点时候，会把attribute和class同时remove掉，这样就可以实现防止节点的闪烁。</p>

<pre><code>var ngCloakDirective = ngDirective({
      compile: function(element, attr) {
        attr.$set('ngCloak', undefined);
        element.removeClass('ng-cloak');
      }
});
</code></pre>

<p>在angular-bootstrap.js中会看见这样的代码去增加前面所说的css：</p>

<pre><code>  document.write('&lt;link rel="stylesheet" type="text/css" href="' + serverPath + '../css/angular.css"/&gt;');
</code></pre>

<p>好像闪烁的问题好像已经能够被我解决了，恩是否是这样的，理论也改如此，但是现实是残酷的，我们的感性认识经常会被现实一记重重的耳光，我们才能很更深入全面的思考，如果浏览器的速度比angular在head中加入css的速度还快呢？我在给公司的一个项目组解决这个闪烁的问题的时候就遇见了这个问题。怎么办呢？那我们只能使出我们必杀技，自己把css加入我们的css文件引入heade，启动加载，ok这样就可以完美解决了。(如果你也遇见了加了ng-cloak还不起作用的话，那么试试直接引入css文件吧)</p>

<p>到这里关于ng-cloak的原理和解决方案已经完成，欢迎继续关注angular的后续经验篇分享。</p>
]]></content>
  </entry>
  
</feed>
