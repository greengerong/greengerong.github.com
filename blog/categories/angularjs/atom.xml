<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Angularjs | 破狼 Blog]]></title>
  <link href="http://greengerong.github.io/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://greengerong.github.io/"/>
  <updated>2015-08-30T22:57:40+08:00</updated>
  <id>http://greengerong.github.io/</id>
  <author>
    <name><![CDATA[破 狼]]></name>
    <email><![CDATA[grzx2210@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[angularjs之browserTrigger]]></title>
    <link href="http://greengerong.github.io/blog/2014/06/24/angularjs-browsertrigger/"/>
    <updated>2014-06-24T20:42:33+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/06/24/angularjs-browsertrigger</id>
    <content type="html"><![CDATA[<p>今天推荐一款来自angularjs源码的单元测试辅助库browserTrigger，这是来自于ngScenario的一段代码。主要用户触发浏览器型行为更新ng中scope view model的值。</p>

<p>这是angularjs源码中单元测试的使用browserTrigger的实例：</p>

<pre><code>it('should set the model to empty string when empty option is selected', function() {
    scope.robot = 'x';
    compile('&lt;select ng-model="robot"&gt;' +
              '&lt;option value=""&gt;--select--&lt;/option&gt;' +
              '&lt;option value="x"&gt;robot x&lt;/option&gt;' +
              '&lt;option value="y"&gt;robot y&lt;/option&gt;' +
            '&lt;/select&gt;');
    expect(element).toEqualSelect('', ['x'], 'y');

    browserTrigger(element.find('option').eq(0));
    expect(element).toEqualSelect([''], 'x', 'y');
    expect(scope.robot).toBe('');
  });
</code></pre>

<p>在这段代码中给browserTrigger传入你希望选择的select option，则它会帮助你tigger change，选中当前option，更触发更新ng select的viewmodel。</p>

<p>在browserTrigger中还为我们做了很多其他输入框或者html控件的触发接口，同时也加入了浏览器的兼容性。使得我们的测试更加方便不用考虑浏览器兼容性或者不同的html控件trigger不同的事件去更新scope的值。</p>

<p>具体更多信息请参考<a href="https://github.com/angular/angular.js/blob/accd35b7471bbf58cd5b569a004824fa60fa640a/test/ng/directive/selectSpec.js">ng的官方测试</a>和<a href="https://raw.githubusercontent.com/angular/angular.js/dafb8a3cd12e7c3247838f536c25eb796331658d/src/ngScenario/browserTrigger.js">browserTrigger源码</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nodejs获取客户端IP Address]]></title>
    <link href="http://greengerong.github.io/blog/2014/02/28/nodejs-get-client-ip/"/>
    <updated>2014-02-28T00:27:22+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/02/28/nodejs-get-client-ip</id>
    <content type="html"><![CDATA[<p>在网上看见很多问node.js如何获取客户端IP,所以记录下来，以供大家参考。</p>

<pre><code>    function getClientIp(req) {
        return req.headers['x-forwarded-for'] ||
        req.connection.remoteAddress ||
        req.socket.remoteAddress ||
        req.connection.socket.remoteAddress;
    };
</code></pre>

<p>代码，第一段判断是否有反向代理IP(头信息：x-forwarded-for)，在判断connection的远程IP，以及后端的socket的IP。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细说angular Form addControl方法]]></title>
    <link href="http://greengerong.github.io/blog/2014/02/21/angular-form-addControl/"/>
    <updated>2014-02-21T17:24:37+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/02/21/angular-form-addControl</id>
    <content type="html"><![CDATA[<p>在本篇博文中，我们将接触angular的验证。angular的验证是由form 指令和ngModel协调完成的。今天博主在这里想要说的是在验证在的一种特殊情况，当验证控件没有没有name属性这是不会被form捕获的。或者是你希望在ngRepeat中使用动态表达式。</p>

<p>下面且让我们先来从angular源码中看起如下：</p>

<p>首先是ngModel：</p>

<pre><code>    var ngModelDirective = function() {
      return {
        require: ['ngModel', '^?form'],
        controller: NgModelController,
        link: function(scope, element, attr, ctrls) {
          // notify others, especially parent forms

          var modelCtrl = ctrls[0],
              formCtrl = ctrls[1] || nullFormCtrl;

          formCtrl.$addControl(modelCtrl);

          scope.$on('$destroy', function() {
            formCtrl.$removeControl(modelCtrl);
          });
        }
      };
    };
</code></pre>

<p>从上面我们能够看出ngModel指令会在编译时期的post link阶段会通过form的 <strong>addControl</strong>方法把自己的controller注册到父节点上的form的formController中。</p>

<p>在看看ngModel controller初始化代码：</p>

<pre><code>    var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse',
        function($scope, $exceptionHandler, $attr, $element, $parse) {
     ....
      this.$pristine = true;
      this.$dirty = false;
      this.$valid = true;
      this.$invalid = false;
      this.$name = $attr.name;
</code></pre>

<p>我们从上面我们可以看到 <strong>ngModel的$name属性并不支持表达式计算</strong>。</p>

<p>而FormController的addControl代码则是：</p>

<pre><code>    /**
     * @ngdoc function
     * @name ng.directive:form.FormController#$addControl
     * @methodOf ng.directive:form.FormController
     *
     * @description
     * Register a control with the form.
     *
     * Input elements using ngModelController do this automatically when they are linked.
     */
    form.$addControl = function(control) {
      // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
      // and not added to the scope.  Now we throw an error.
      assertNotHasOwnProperty(control.$name, 'input');
      controls.push(control);

      if (control.$name) {
        form[control.$name] = control;
      }
    };
</code></pre>

<p>从上面我们可以清楚的看见虽然ngModel注册了自己，但是这里也不一定能注册成功，<strong>ngModel心必须有自己的$name才能被注册成功</strong>。</p>

<p>从上面的代码中可以得出，当我们的验证失效的时候，我们可以有一个万能的方式就是 <strong>手动注册到form controller</strong></p>

<h3>手动注册form controller</h3>

<p>为了我写了一个dy-name的插件，其会在post link阶段解析表达式，并把自己注册到父form controller。</p>

<p>如下：</p>

<pre><code>    .directive("dyName", [

        function() {
          return {
            require: "ngModel",
            link: function(scope, elm, iAttrs, ngModelCtr) {
              ngModelCtr.$name = scope.$eval(iAttrs.dyName)
              var formController = elm.controller('form') || {
                $addControl: angular.noop
              };
              formController.$addControl(ngModelCtr);

              scope.$on('$destroy', function() {
                formController.$removeControl(ngModelCtr);
              });

            }
          };
        }
      ])
</code></pre>

<p>使用方式：</p>

<pre><code>    &lt;div ng-repeat="item in demo.fields"&gt;
      &lt;div class="control-group"&gt;
        &lt;label class="control-label"&gt; : &lt;/label&gt;
        &lt;div class="controls"&gt;
          &lt;input type="number"  dy-name="item.field" ng-model="demo.data[item.field]" min="10" max="500" ng-required="true"/&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
</code></pre>

<p>其实实现为在post link阶段获取到form controller，并把自己注册到form controller，而且为了消除对象的级联，将会在scope摧毁阶段remove自己。</p>

<p>其效果请看<a href="http://jsbin.com/docow/1/edit?html,js,output">jsbin $addControl</a></p>

<p><strong>注意</strong>:在formController.$addControl方法的参数传入的不是界面控件，而是ngModelController.或者名字为$addController更合适。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angularjs中文版本开发指南发布]]></title>
    <link href="http://greengerong.github.io/blog/2014/02/16/angularjs-chinese-guide-public/"/>
    <updated>2014-02-16T02:02:17+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/02/16/angularjs-chinese-guide-public</id>
    <content type="html"><![CDATA[<p><img src="http://angularjs.org/img/AngularJS-large.png" alt="http://angularjs.org/img/AngularJS-large.png" /></p>

<p>从本人开始在写关于Angularjs的文章开始，也算是见证了Angularjs在国内慢慢的火起来，如今的Angularjs正式如日中天。想知道为什么Angularjs会这么火，请移步<a href="http://www.cnblogs.com/whitewolf/p/angularjs-remove-unused-watch.html">angularjs移除不必要的$watch</a>.</p>

<p>也是一次偶然的机会，在Angular.js中文社区群里相遇一群Angular的爱好者，在一次巧妙的交谈，大家对于Angular官方的Guide最新版本没有中文版本表示无助，所以为了诸君更好的了解学习Angularjs，大家临时组织了一个Angular 开发指南翻译团队。</p>

<p>在经过一段时间的协调和大家付出工作之外的业余时间，如今Angularjs的中文本学习指南终于上线出炉</p>

<p>地址为：</p>

<pre><code>[http://www.ngnice.com/](http://www.ngnice.com/)
</code></pre>

<p>在翻译过程中大家力求准确，但也并不是逐字翻译，也会加上一些"译者注"之类，让大家能够更好的学习，使用Angularjs。同时在Angular开发指南首页我们也收集了很多很好的Angularjs学习资料供大家学习。</p>

<p>最后虽然大家都很努力的翻译力求精准，但也会难免有些issue，请不辞指出，可以提交在github repo issue,或者本文后边加上评论。</p>

<p>同时在本博客中也会很多关于Angularjs实践方面的博客，欢迎大家不辞指教。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Angularjs ngOptions加上index解决方案]]></title>
    <link href="http://greengerong.github.io/blog/2014/02/15/index-for-ng-options/"/>
    <updated>2014-02-15T21:43:06+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/02/15/index-for-ng-options</id>
    <content type="html"><![CDATA[<p>今天在Angularjs交流群中有位童学问道如何为Angular select的ngOptions像Angularjs的ngRepeat一样加上一个索引$index.</p>

<p>其实对于这个问题来说Angular本身并未提供$index之类的变量供使用。但是也不是说对于这个问题我们就没有解决方案。</p>

<p>把这个问题换成角度来看,我们所需要的就是js数组的下标，所以我们如果我们能够在对象上加入下标，使用表达式作为option的label就能解决了。</p>

<p>但是第一印象让我想起的是js数组本来就是一个key/value的对象，只是key为数组下标而已，所以有了如下之设计：</p>

<p>html:</p>

<pre><code>  &lt;pre&gt;&lt;/pre&gt;

  &lt;select  ng-model="a" ng-options="value.field as getDesc1(key,value) for (key,value) in t"&gt;&lt;/select&gt;
</code></pre>

<p>  js:</p>

<pre><code>$scope.getDesc1 = function(key, value) {
    return (parseInt(key, 10) + 1) + "-&gt;" + value.field;
};
</code></pre>

<p>可是不幸的是如果对于JavaScript你若将他作为key/value对象那么key将是无序的所以，出现了无序的下标如下：</p>

<pre><code>&lt;select ng-model="a" ng-options="l.field as getDesc1(key,value) for (key,value) in t " class="ng-valid ng-dirty"&gt;
  &lt;option value="0"  &gt;1-&amp;gt;jw_companyTalent&lt;/option&gt;
  &lt;option value="1"  &gt;2-&amp;gt;jw_reportgroup&lt;/option&gt;
  &lt;option value="10" &gt;11-&amp;gt;jw_ads&lt;/option&gt;
  &lt;option value="11" &gt;12-&amp;gt;jw_jobcomment&lt;/option&gt;
  &lt;option value="12" &gt;13-&amp;gt;jw_companyInfo&lt;/option&gt;
  ....
&lt;/select&gt;
</code></pre>

<p>所以这样是无法解决的。还好博主还有一招，ngOptions支持Angularjs的filter，所以我们可以对数据源对象上加上一个order字段标示下标作为序号。并且你可以在一个2年前的Angular的issue中看到Angular已经fix issue，option会对数组进行按下标顺序生成。</p>

<p>html:</p>

<pre><code>&lt;pre&gt;&lt;/pre&gt;

&lt;select  ng-model="b" ng-options="l.field as getDesc(l) for l in t | index "&gt;&lt;/select&gt;
</code></pre>

<p>js:</p>

<pre><code>    var app = angular.module('plunker', []);

    app.controller('MainCtrl', function($scope) {
      $scope.t = [{
        "field": "jw_companyTalent"
      }, {
        "field": "jw_reportgroup"
      }];
      $scope.getDesc = function(l) {
        return l.order + "-&gt;" + l.field;
      };
    }).filter("index", [
      function() {
        return function(array) {
          return (array || []).map(function(item, index) {
            item.order = index + 1;
            return item;
          });
        };
      }
    ]);
</code></pre>

<p>这下option是按照有序的生成，最后我们终于能完美解决了,所以本文也将收尾。在最后在附上可运行的demo<a href="http://plnkr.co/edit/tRxzOT?p=preview">plnkr ngOptions index</a>;</p>
]]></content>
  </entry>
  
</feed>
