<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: | 破狼 Blog]]></title>
  <link href="http://greengerong.github.io/blog/categories//atom.xml" rel="self"/>
  <link href="http://greengerong.github.io/"/>
  <updated>2015-01-18T15:11:47+08:00</updated>
  <id>http://greengerong.github.io/</id>
  <author>
    <name><![CDATA[破 狼]]></name>
    <email><![CDATA[grzx2210@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[prerender-SPA程序的SEO优化策略]]></title>
    <link href="http://greengerong.github.io/blog/2013/12/08/prerender-seo-for-single-page-application/"/>
    <updated>2013-12-08T00:00:00+08:00</updated>
    <id>http://greengerong.github.io/blog/2013/12/08/prerender-seo-for-single-page-application</id>
    <content type="html"><![CDATA[<p>随着web2.0的兴起，ajax的时代已经成为了事实，更如今Knockout,backbone, angular,ember前端MDV(model driver view)框架强势而来，Single Page Application已经为大家所熟悉了。如今常见的SPA程序，restfull和前端MDV之类的框架能够实实在在的减少我们的代码开发量，让我更多的注意力关注在真正的业务逻辑上。在众多前端MDV框架从博客中可以看出来笔者还是钟爱于angular，然而服务端平台的选择的话：在.net平台笔者会首选webapi+oData,jvm平台spring restfull。</p>

<p>但是相应带来的是搜索引擎优化(SEO)是个难题，因为爬虫不会去执行JavaScript。现在很幸运的是在Google推出angular之后，也给出了一些解决方案：<a href="https://developers.google.com/webmasters/ajax-crawling/docs/getting-started">Google&rsquo;s ajax crawling protocol</a>.此协议现在已被Google和bing所实现。</p>

<p>在协议中规定，搜索引擎会把带有#!someurl的链接转换为<em>escaped_fragment</em>=someurl访问解析，例如：</p>

<pre><code>www.example.com/ajax.html#!key=value
</code></pre>

<p>将会变为</p>

<pre><code>www.example.com/ajax.html?_escaped_fragment_=key=value
</code></pre>

<p>所以如果我们需要更好的SEO的支持的话，我们可以从现在开始把我们程序中的#变为#！,特别angular程序，因为框架原生支持对#！的解析。</p>

<p>基于这个协议和phantomjs(headless的浏览器内核)我们的SPA SEO工具 <a href="http://prerender.io/">prerender(http://prerender.io/)</a>应运而生，在官方和社区的支持下，现在已经有node.js express,ruby on rails,java,asp.net,php,python主流框架和nginx之类的支持。</p>

<p>prerender架构流程图如下：</p>

<p><img src="/images/blog_img/prerender.jpg" alt="/images/blog_img/prerender.jpg" /></p>

<p>prerender分为两个部分一部分为后端云服务和应用程序客户端，客户端主要拦截来自爬虫的请求在转发到后端云服务处理返回处理后并且去掉多余script/css的html在返回给爬虫。</p>

<p>后端云服务（nodejs项目），利用phantomjs这个无ui headless的浏览器内核加载页面地址，并等到页面解析后获取document html，并处理去掉无用的部分返回到前段客户端程序。</p>

<p>而前段程序则为不同语言框架而实现的不同拦截器，如java的filter，asp.net mvc的HttpModule，主要任务为拦截请求并转发给后端云服务处理。其拦截规则为：</p>

<ol>
<li>检查url中是否带有<em>escaped_fragment</em>或者请求user-agent是已知或者配置的爬虫user-agent</li>
<li>确认拦截的不是js,css之类的资源文件</li>
<li>在确认url是在白名单中（可选如果配置的白名单的话）</li>
<li>确认不应该在黑名单中(可选如果配置了黑名单的话)</li>
</ol>


<p>注：最好值配置黑名单或者白名单中的一种方式。</p>

<p>有了prerender，因为SEO而放弃SPA不再是理由了，关于prerender的任何issue大家可以及时提出，让它更加完善。具体关于如何使用和测试请转向主页和各个client程序页面，<a href="http://prerender.io/">http://prerender.io/</a></p>
]]></content>
  </entry>
  
</feed>
