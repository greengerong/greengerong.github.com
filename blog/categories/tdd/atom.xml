<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | 破狼 Blog]]></title>
  <link href="http://greengerong.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://greengerong.github.io/"/>
  <updated>2015-09-25T08:59:33+08:00</updated>
  <id>http://greengerong.github.io/</id>
  <author>
    <name><![CDATA[破 狼]]></name>
    <email><![CDATA[grzx2210@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mockito自定义verify参数Matcher]]></title>
    <link href="http://greengerong.github.io/blog/2014/11/12/mockito-custom-verify-matcher/"/>
    <updated>2014-11-12T13:53:13+08:00</updated>
    <id>http://greengerong.github.io/blog/2014/11/12/mockito-custom-verify-matcher</id>
    <content type="html"><![CDATA[<p>在TDD开发中，也许我们会遇见对一些重要的无返回值的行为测试，比如在用户的积分DB中增加用户的积分，这个行为对于我们的业务具有重要的价值，所以我们也希望能测试覆盖这部分业务价值。这个时候我们就得使用mockito带来的verify断言，但verify的参数断言主要有eq，或者any常见的方式。有时我们也希望能够断言对象的一部分属性，比如上文的积分数值，对于不同的场景增加的用户积分可能不同。</p>

<p>回到Mockito的参数Matcher，Mockito给我们提供了ArgumentMatcher，以供我们来扩展Matcher。下面假设一个增加用户积分的场景：</p>

<pre><code>     public class Game {
        private String type;
        private int rate;

        public Game(String type, int rate) {
            this.type = type;
            this.rate = rate;
        }

        public String getType() {
            return type;
        }

        public int getRate() {
            return rate;
        }

    }

    public class GameDao {
        public void addRate(Game game) {
            //TODO: insert to db
        }
    }
</code></pre>

<p>我们希望能够对verify GameDao调用了addRate，并且是积分rate为特定值。</p>

<p>所以我们可以扩展Mockito的ArgumentMatcher：</p>

<pre><code>public class PartyMatcher&lt;T&gt; extends ArgumentMatcher&lt;T&gt; {
    private Object value;
    private Function&lt;T, Object&gt; function;

    public PartyMatcher(Function&lt;T, Object&gt; getProperty, Object value) {
        this.value = value;
        this.function = getProperty;
    }

    public static &lt;F&gt; PartyMatcher&lt;F&gt; partyMatcher(Function&lt;F, Object&gt; getProperty, Object value) {
        return new PartyMatcher&lt;F&gt;(getProperty, value);
    }

    @Override
    public boolean matches(Object o) {
        return function.apply((T) o).equals(value);
    }
}
</code></pre>

<p>所以我们的测试可以如下：</p>

<pre><code>    @Test
    public void should_run_customer_mockito_matcher() throws Exception {

        final GameDao gameDao = mock(GameDao.class);
        gameDao.addRate(new Game("签到", 7));

        verify(gameDao).addRate(argThat(new PartyMatcher&lt;Game&gt;(new Function&lt;Game, Object&gt;() {
            @Override
            public Object apply(Game game) {
                return game.getRate();
            }
        }, 7)));

        verify(gameDao).addRate(argThat(new PartyMatcher&lt;Game&gt;(new Function&lt;Game, Object&gt;() {
            @Override
            public Object apply(Game game) {
                return game.getType();
            }
        }, "签到")));
    }
</code></pre>

<p>Mockito给我们提供了很多关于Matcher扩展的方法，本文只是ArgumentMatcher的实例。</p>
]]></content>
  </entry>
  
</feed>
