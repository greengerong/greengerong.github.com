<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rebirth | 破狼 Blog]]></title>
  <link href="http://greengerong.github.io/blog/categories/rebirth/atom.xml" rel="self"/>
  <link href="http://greengerong.github.io/"/>
  <updated>2016-09-07T13:09:42+08:00</updated>
  <id>http://greengerong.github.io/</id>
  <author>
    <name><![CDATA[破 狼]]></name>
    <email><![CDATA[grzx2210@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[最新Angular2案例rebirth开源]]></title>
    <link href="http://greengerong.github.io/blog/2016/09/03/angular2-demo-rebirth/"/>
    <updated>2016-09-03T22:33:18+08:00</updated>
    <id>http://greengerong.github.io/blog/2016/09/03/angular2-demo-rebirth</id>
    <content type="html"><![CDATA[<p>在过去的几年时间里，Angular1.x显然是非常成功的.但由于最初的架构设计和Web标准的快速发展，逐渐的显现出它的滞后和不适应。这些问题包括性能瓶颈、滞后于急速发展的Web标准、移动化等多平台发展，学习难度等。</p>

<p>所以Angular团队最终决定全新方式构建Angular2框架。Angular2框架现在已经进入RC6版本，很快将进入最终的发布版。Angular2带来了很多不错的特性，它们包括跨平台、高性能、高效开发等。</p>

<p>由于在Angular中引入了render层隔离设计，所以它也很容易实现跨平台的拓展。理论上只需要实现目标平台的render层处理。目前在Angular2的生态圈中已有的跨平台框架如下：</p>

<ul>
<li>Web： <a href="https://angular.io/">Angular框架自身</a>;</li>
<li>Universal / Isomorphic: <a href="https://universal.angular.io/">Universal</a>;</li>
<li>Progressive Web App: <a href="https://mobile.angular.io/">mobile-toolkit</a>;</li>
<li>NativeScript: <a href="https://github.com/NativeScript/nativescript-angular">nativescript-angular</a>;</li>
<li>React Native: <a href="https://github.com/angular/react-native-renderer">react-native-renderer</a>;</li>
<li>Ionic2: <a href="http://ionic.io/2/">Ionic2</a>;</li>
<li>Electron: <a href="https://github.com/angular/angular-electron/">angular-electron</a>;</li>
<li>&hellip;</li>
</ul>


<p>Angular2架构的重新设计，使得其在性能方面也得到了巨大的改善：</p>

<ul>
<li>组件树和单向的@Input、@Output使得变更的影响变得可预知，不再需要Angular1那样多次的digest直到稳定；以及结合<code>ChangeDetectionStrategy.OnPush</code>与immutablejs或者是Rxjs，Angular2的变更检查算法复杂度降为了log(n)。相对于Angular1，得到了至少5倍的性能提升；</li>
<li>Universal服务端渲染能够更好提升首屏加载的性能；</li>
<li>AOT技术引入，能够让组件处理的生成代码提前到构建时期；再加上TypeScript的tree shaking等技术，能够更大化的减小加载JavaScript文件大小和提升运行时性能；</li>
<li>Web端Web Worker的实现，能够更好的解放我们的UI线程，得到更好的而用户体验，以及性能的提升；</li>
</ul>


<p>不仅仅这些，Angular2还有很多的优秀特性。如：基于TypeScript的静态类型检查、拥抱web标准（Shadow dom，fetch API）等等。</p>

<p>总之，Angular2是一门值得我们学习的优秀前端框架。随着Angular2进入了RC6版本，意味发布版将不远了。学习Angular2的时候已到。</p>

<p>========= 未来即将来到</p>

<p>同时笔者也开源了自己的<a href="https://github.com/greengerong/rebirth">rebirth</a>项目供大家学习。它是一个利用Angular2开发的博客系统前端部分。它涉及到的Angular2知识点非常的全面，包括：组件化，自定义directive，路由，HTTP交互，Template drive form和Reactive form，异步路由，jwt token认证，资源权限控制，动态加载component，jQuery插件集成等常用知识点。</p>

<p>同时<a href="https://github.com/greengerong/rebirth">rebirth</a>项目也集成了很多前端优秀的技术实践：</p>

<ul>
<li>Angular2 + rxjs</li>
<li>bootstrap-sass</li>
<li>codemirror + markdownit(online markdown文档编辑器)</li>
<li>webpack2 + DashboardPlugin(代码打包)</li>
<li>TypeScript2 + @types</li>
<li>stubby(数据mock框架)</li>
<li>tslint + codelyzer(ts代码和Angular2组件静态检查)</li>
<li>angular2-template-loader(Angular2 component的html、css打包)</li>
<li>karma + phantomjs(TDD开发)</li>
<li>sass + postcss(css样式组织)</li>
<li>typedoc(ts文档)</li>
<li>fontgen-loader(icon font)</li>
</ul>


<p>在这里为大家放上几张<a href="https://github.com/greengerong/rebirth">rebirth</a>效果图，供大家预览：</p>

<p>移动端样式：</p>

<p><img src="https://cloud.githubusercontent.com/assets/2569893/17268750/bd6fe296-5666-11e6-84e0-c78d9b8c29d2.png"  style="max-width:300px;" /></p>

<p>PC端样式：</p>

<p><img src="https://github.com/greengerong/rebirth/raw/master/shortscreens/rebirth-index.png" alt="https://github.com/greengerong/rebirth/raw/master/shortscreens/rebirth-index.png" /></p>

<p><img src="https://github.com/greengerong/rebirth/raw/master/shortscreens/rebirth-manage-list.png" alt="https://github.com/greengerong/rebirth/raw/master/shortscreens/rebirth-manage-list.png" /></p>

<p><img src="https://github.com/greengerong/rebirth/raw/master/shortscreens/rebirth-manage-edit.png" alt="https://github.com/greengerong/rebirth/raw/master/shortscreens/rebirth-manage-edit.png" /></p>

<p>希望大家能喜欢。有任何的问题可以在笔者的github提issue，笔者会在空闲时间为大家解答。</p>
]]></content>
  </entry>
  
</feed>
